{"version":3,"sources":["logo.svg","component/Form.js","component/Result.js","component/Results.js","component/Popup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","OpenPopup","onClick","imdbID","src","Poster","Title","Results","results","map","key","Popup","selected","Closepop","Year","imdbRating","Plot","App","useState","s","state","setState","e","target","value","console","log","prevState","axios","get","then","data","Search","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,wHCU5BC,G,YARF,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACzB,OACI,6BAASC,UAAU,kBACf,2BAAOC,KAAK,OAAOC,YAAY,wBAAwBF,UAAU,YAAYG,SAAUL,EAAaM,WAAYL,O,gBCK7GM,MARf,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UACtB,OACI,yBAAKP,UAAU,SAASQ,QAAS,kBAAMD,EAAUD,EAAOG,UACpD,yBAAKC,IAAKJ,EAAOK,SACjB,4BAAKL,EAAOM,SCOTC,MAXf,YAA0C,IAAvBC,EAAsB,EAAtBA,QAASP,EAAa,EAAbA,UACxB,OACI,6BACI,6BAASP,UAAU,WACdc,EAAQC,KAAI,SAAAT,GAAM,OACf,kBAAC,EAAD,CAAQU,IAAKV,EAAOG,OAAQH,OAAQA,EAAQC,UAAWA,UCU5DU,MAff,YAAwC,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACvB,OACI,6BAASnB,UAAU,SACf,yBAAKA,UAAU,WACX,4BAAKkB,EAASN,MAAM,kCAAQM,EAASE,KAAjB,MACpB,uBAAGpB,UAAU,UAAb,YAAgCkB,EAASG,YACzC,yBAAKrB,UAAU,QACX,yBAAKU,IAAKQ,EAASP,SACnB,2BAAIO,EAASI,OAEjB,4BAAQtB,UAAU,QAAQQ,QAASW,GAAnC,YC0DDI,MA7Df,WAAgB,IAAD,EAEaC,mBAAS,CACjCC,EAAG,GACHX,QAAS,GACTI,SAAU,KALC,mBAENQ,EAFM,KAECC,EAFD,KA8Cb,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,oBAEF,8BACE,kBAAC,EAAD,CAAMF,YA9BQ,SAAC8B,GACnB,IAAIH,EAAIG,EAAEC,OAAOC,MACjBC,QAAQC,IAAIP,GACZE,GAAS,SAAAM,GACP,OAAO,2BAAKA,GAAZ,IAAuBR,EAAGA,QA0BQ1B,OA3CvB,SAAC6B,GAEA,UAAVA,EAAEZ,KACJkB,IAAMC,IAAN,oDAAuDT,EAAMD,IAC1DW,MAAK,YAAe,IACftB,EADc,EAAXuB,KACYC,OACnBX,GAAS,SAAAM,GACP,OAAO,2BAAKA,GAAZ,IAAuBnB,QAASA,aAqCpC,kBAAC,EAAD,CAASA,QAASY,EAAMZ,QAASP,UAvBrB,SAAAgC,GAChBL,IAAMC,IAAN,oDAAuDI,IAAMH,MAAK,YAAe,IAC3E9B,EAD0E,EAAX+B,KAEnEN,QAAQC,IAAI1B,GACZqB,GAAS,SAAAM,GACP,OAAO,2BAAKA,GAAZ,IAAuBf,SAAUZ,aAmBD,oBAAxBoB,EAAMR,SAASN,OAAuB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,SAfpE,WACfQ,GAAS,SAAAM,GACP,OAAO,2BAAKA,GAAZ,IAAuBf,SAAU,cCtCnBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.a2060862.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Form = ({ handleInput, search }) => {\r\n    return (\r\n        <section className=\"searchbox-wrap\">\r\n            <input type=\"text\" placeholder=\"Search for a movie...\" className=\"searchbox\" onChange={handleInput} onKeyPress={search} />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\n\r\nfunction Result({ result, OpenPopup }) {\r\n    return (\r\n        <div className=\"result\" onClick={() => OpenPopup(result.imdbID)}>\r\n            <img src={result.Poster} />\r\n            <h3>{result.Title}</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Result\r\n","import React from 'react';\r\nimport Result from './Result';\r\nfunction Results({ results, OpenPopup }) {\r\n    return (\r\n        <div>\r\n            <section className=\"results\">\r\n                {results.map(result => (\r\n                    <Result key={result.imdbID} result={result} OpenPopup={OpenPopup} />\r\n                ))}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\nexport default Results;","import React from 'react'\r\n\r\nfunction Popup({ selected, Closepop }) {\r\n    return (\r\n        <section className=\"popup\">\r\n            <div className=\"content\">\r\n                <h2>{selected.Title}<span>({selected.Year})</span></h2>\r\n                <p className=\"rating\">Rating : {selected.imdbRating}</p>\r\n                <div className=\"plot\">\r\n                    <img src={selected.Poster} />\r\n                    <p>{selected.Plot}</p>\r\n                </div>\r\n                <button className=\"close\" onClick={Closepop}>Close</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default Popup","import React, { Component, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './component/Form';\nimport axios from 'axios';\nimport Results from './component/Results';\nimport Popup from './component/Popup';\n\n\nfunction App() {\n\n  const [state, setState] = useState({\n    s: '',\n    results: [],\n    selected: {}\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=e5004a7b\";\n\n  const search = (e) => {\n\n    if (e.key === \"Enter\") {\n      axios.get(`http://www.omdbapi.com/?apikey=e5004a7b&s=${state.s}`)\n        .then(({ data }) => {\n          let results = data.Search;\n          setState(prevState => {\n            return { ...prevState, results: results }\n          });\n        });\n    }\n  };\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n    console.log(s);\n    setState(prevState => {\n      return { ...prevState, s: s }\n    })\n  };\n\n  const OpenPopup = id => {\n    axios.get(`http://www.omdbapi.com/?apikey=e5004a7b&i=${id}`).then(({ data }) => {\n      let result = data;\n      console.log(result);\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n  const Closepop = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    });\n  }\n\n\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Movies Database</h1>\n      </header>\n      <main>\n        <Form handleInput={handleInput} search={search} />\n        <Results results={state.results} OpenPopup={OpenPopup} />\n        {typeof state.selected.Title != \"undefined\" ? <Popup selected={state.selected} Closepop={Closepop} /> : false}\n      </main>\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}